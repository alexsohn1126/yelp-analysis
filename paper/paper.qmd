---
title: "Modelling the Yelp Rating of Restaurants: Disparity of Rating Between Restaurant Cuisines and Prices"
author: 
  - Moohaeng Sohn
thanks: "Code and data are available at: [https://github.com/alexsohn1126/yelp-analysis](https://github.com/alexsohn1126/yelp-analysis)"
date: today
date-format: long
abstract: "We use the Yelp dataset to explore and model how different attributes of a restaurant play a factor in the review ratings. We found there are some variables which are promising predictors for the rating of a restaurant. Cuisines such as Chinese or Mexican tended to have lower ratings, and lower priced cuisines performed worse. This study can be used to predict whether a restaurant will be successful or not."
format: pdf
number-sections: true
toc: true
bibliography: references.bib
---

```{r}
#| include: false
#| warning: false
#| message: false

library(tidyverse)
library(modelsummary)
library(arrow)
library(kableExtra)
library(here)
library(rstanarm)
data <- read_parquet(here("./data/analysis_data/restaurant_data.parquet"))
model <- readRDS(here("./models/restaurant_rating_model_ord_logit.rds"))
```

# Introduction

Thanks to internet technology, we can get hundreds, if not thousands of reviews of restaurants around us. This means we can choose which restaurants we will go to based on those reviews. Therefore, keeping a high review rating is very important for a restaurant's long-term success.

Yelp is a website where people can post reviews about local businesses, containing 287 million reviews [@yelpfacts]. Yelp's reviews are based on the 5-star system. Users can choose between one to five stars to put on their review. These reviews are collected and averaged, which becomes the rating for the establishment. We will use a dataset from Yelp which we will dive into in @sec-data.

In this paper, our estimand of interest is how different factors such as the cuisine of the restaurant, or the price of the menu items in the restaurants affect the rating of a restaurant. We will first explore the dataset in @sec-data, and discuss the model the relationship between aforementioned variables using logistic regression in @sec-model. Then we will look at the results in @sec-res, finally discussing about these results in @sec-discussion.

We found out that higher the price of a restaurant, more likely it will have a higher rating, though with a couple of exceptions. And certain cuisines performed significantly worse than other cuisines. We discuss why that may be the case using graphs and tables in @sec-discussion. This study may be important to entrepreneurs whom may be interested in how these reviews may possibly be biased due to the cuisine and the price of a restaurant.

We used the programming language R [@citeR], along with packages `tidyverse` [@tidyverse], `rstanarm` [@rstanarm], `jsonlite` [@jsonlite], `arrow` [@arrow], `modelsummary` [@modelsummary], `kableExtra` [@kableExtra], `here` [@here], `leaflet` [@leaflet], `htmlwidgets` [@htmlwidgets], and `styler` [@styler].

# Data {#sec-data}

The restaurant review dataset we will use is from Yelp. Yelp offers an academic dataset for the public to use, although it is a small subset of their massive database [@yelpdataset-faq]. The dataset is split between multiple JSON files, but we will only focus on businesses JSON. The raw businesses dataset contains 150,346 businesses. 

These businesses are from metropolitan areas in United States and Canada. Yelp claims these restaurants are from metropolitan areas near Montreal, Calgary, Toronto, Pittsburgh, Charlotte, Urbana-Champaign, Phoenix, Las Vegas, Madison, and Cleveland [@yelpdataset-faq]. But if you map out the raw dataset as we did in @sec-dataset-map, you will see that there are no restaurants from cities such as Toronto or Montreal or Calgary. This is an error on Yelp's data documentation, but we won't be dealing with locations of restaurants directly, so we won't be heavily affected by this error.

Another possible source of restaurant reviews could have been from Google reviews of restaurants, but that requires us to use Google Business Profile APIs, which cost money. There is always an option to perform webscraping, but this is a gray area legally, and may be computationally expensive. There are other review websites such as TripAdvisor, but they do not seem to have a dataset open to the public like Yelp does.

The dataset contains multiple variables such as the name of the business, the location of the business, and things such as amenities on site. We have filtered through the raw dataset to only contain restaurants. There were a total of 47,213 restaurants in the final dataset. We will focus on the star rating, categories, and price range of the menu in the restaurant.

## Star Rating

Star rating is the average star rating of a restaurant. One odd thing about the star rating given in the dataset is that it is rounded to the nearest star or half of a star. So all possible values of star ratings are: 1.0, 1.5, 2.0, and so on until 5.0.

@Fig-star-rating-distribution shows us that 4.0 is the most common star rating of restaurants. This distribution is left skewed, as we can see the rating gradually increases from 1.0 to 4.0, then quickly drops off from 4.0 to 5.0. We can infer from this that most people consider somewhere around 4-stars an average dining experience.

@Tbl-star-rating-summary shows the summary statistics of star ratings, and we can see that as we explained, that the minimum is 1.0 and the maximum is 5.0. The standard deviation isn't that big, which is to be expected because most of the restaurants lie between 3.5 to 4.5 rating range.

```{r}
#| label: fig-star-rating-distribution
#| fig-cap: Distribution of Star Ratings
#| echo: false

data |>
  ggplot(aes(x = rating)) +
  geom_histogram(binwidth = 0.25, fill = "grey", color = "black") +
  labs(
    title = "Distribution of Star Ratings",
    x = "Stars",
    y = "Frequency"
  ) +
  theme_minimal()
```

```{r}
#| label: tbl-star-rating-summary
#| tbl-cap: "Summary Statistics of Star Ratings"
#| echo: false

summary_stats <- data |>
  summarize(
    Count = n(),
    Mean = mean(rating),
    Median = median(rating),
    SD = sd(rating),
    Minimum = min(rating),
    Maximum = max(rating)
  )

# Create a table using kable
summary_table <- kable(summary_stats)

summary_table
```

## Categories (Cuisine)

Categories for a restaurant describes what kind of business it is. These categories are chosen manually by the business owners [@yelpcategory]. Because Yelp is a business review platform, we have decided to filter out non-restaurant businesses from our final dataset. This meant any restaurants which didn't include one of the categories: "Restaurants", "Food", "Fast Food" would not be included in the final dataset. After filtering out non-restaurants, we have chosen top 12 cuisines to categorize each restaurant into. The restaurants that did not have these cuisines in their categories were put into "Other" category. This is why we have named this section also cuisine, as we will focus on cuisine categories of restaurants.

@Tbl-category-summary shows us what types of cuisines we have selected, and the number of restaurants with that cuisine in their category. We can see nearly half of the restaurants are categorized as "Other". The next largest cuisine in our dataset is American. This may be due to the fact that all the restaurants in the dataset are from United States and Canada.

```{r}
#| label: tbl-category-summary
#| tbl-cap: "Numbers of Restaurants Per Cuisine"
#| echo: false

# Calculate the count of restaurants per category
restaurant_summary <- data |>
  group_by(cuisine) |>
  summarize(restaurants_count = n()) |>
  ungroup()

# Calculate the percentage of restaurants per category
total_restaurants <- nrow(data)
restaurant_summary <- restaurant_summary |>
  mutate(percentage = round((restaurants_count / total_restaurants) * 100, 2))

# Arrange the result by frequency in descending order
restaurant_summary <- restaurant_summary |>
  arrange(desc(restaurants_count))

# Rename the columns
colnames(restaurant_summary) <- c("Cuisine", "Number of Restaurants", "Percentage (%)")

# Print table
kable(restaurant_summary)
```

## Price Range

The price range is given as an integer from 1 to 4, inclusive. This is supposed to indicate how expensive the restaurant is per person. 1 being more affordable, and 4 being more expensive. There were restaurants with no price ranges, and those were discarded from the cleaned dataset. On Yelp's website, these price ranges are shown as number of dollar signs equal to the price range. For example, Yelp would show one dollar sign if price range is 1. 

@Tbl-price-range-summary shows that the over 95% of the restaurants have price range of 1 or 2. About 95.81% of restaurants in the database are in price range 1 or 2. Only 3.73% of the restaurants are in price range 3, and even less, 0.46% of the restaurants are in price range 4.

```{r}
#| label: tbl-price-range-summary
#| tbl-cap: "Numbers of Restaurants Per Price Range"
#| echo: false

# Calculate the count of restaurants per category
restaurant_summary <- data |>
  group_by(price) |>
  summarize(restaurants_count = n()) |>
  ungroup()

# Calculate the percentage of restaurants per category
total_restaurants <- nrow(data)
restaurant_summary <- restaurant_summary |>
  mutate(percentage = round((restaurants_count / total_restaurants) * 100, 2))

# Arrange the result by frequency in descending order
restaurant_summary <- restaurant_summary |>
  arrange(price)

# Rename the columns
colnames(restaurant_summary) <- c("Price Range", "Number of Restaurants", "Percentage (%)")

# Print table
kable(restaurant_summary)
```

## Measurement

For star ratings, the minimum star rating is one and the maximum star rating is five. This is because the minimum star rating that someone can give a restaurant is 1 stars, and the maximum star rating is 5 stars. While the average star rating can have 0.5 star increments, users' reviews can only give ratings in 1 star increments. For example, no 4.5 stars can be given in a review. Each user can rate a business only once, though they are free to change their rating later, one user cannot post multiple reviews about a restaurant. This limits the power each user has to change the rating of a business.

As mentioned above, categories for a restaurant is not given automatically, rather given by the business owners. This means it can be a bit inaccurate when it comes to what exact cuisine that a restaurant serves. Another way the cuisines can be inaccurate is when a restaurant serves foods from multiple cuisines. This makes it complicated to categorize them exactly into each cuisine.

Yelp decides the price of the restaurant by crowdsourcing the price of the restaurant [@Yu_Margolin_2021]. According to @Yu_Margolin_2021, the price range of the restaurant is decided by the price brackets as shown in @tbl-prices.

```{r}
#| echo: false
#| eval: true
#| label: tbl-prices
#| tbl-cap: "Table of how Yelp Maps Price Ranges"
#| warning: false

# Make a tibble of prices, and its corresponding value in our dataset
tableData <- tibble(
  price_range_num = 1:4,
  price_brackets = c("Under $10", "$11 - $30", "$31 - $60", "Over $61")
)

# Print table
kable(tableData, align = c("c", "c"), col.names = c("Price Range Number", "Price"))
```

# Model {#sec-model}

We are trying to model the rating $y$, and as we have discussed in the data section, there are only 9 possible outcomes. From 1.0, to 5.0, in increments of 0.5. Therefore we will use ordinal logistic regression. If we assume that the observed rating $y$ is from a continuous variable $y^*$, then we can say that:

$$
y = \begin{cases}
1.0 & \text{ if } y^* \leq c_{1.0|1.5} \\
1.5 & \text{ if } y^* \in (c_{1.0|1.5}, c_{1.5|2.0}) \\
\vdots & \\
4.5 & \text{ if } y^* \in (c_{4.0|4.5}, c_{4.5|5.0}) \\
5.0 & \text{ if } y^* \geq c_{4.5|5.0}
\end{cases}
$$

Where $c_{n_1|n_2}$ represents the cutoff between $n_1$ rating and $n_2$ rating. The above notations are borrowed from @regandothers \[p.276\] and @evalLLM [p.12].

We will use a Bayesian framework to make our model. To do this, we use `rstanarm` [@rstanarm] R package. Background details and diagnostics are included in [Appendix -@sec-model-details].

## Model set-up

We will model the final discrete rating $y$ by a continuous variable $y^*$. Because we are doing ordinal logistic regression, $y^*$ will have a logistic distribution.

$$
y^* = \beta_1 \cdot \text{cuisine}_i + \beta_2 \cdot \text{price}_i
$$

We use the R2 prior, because `rstanarm` requires us to do this for this computational process, with the mean set as 0.3 as suggested by @regandothers [p.276]. R2 uses the prior beliefs about the location about $R^2$, which is "the proportion of variance in the outcome attributable to the predictors" @rstanarm. We use default priors from `rstanarm` for the cut points ($c_{n_1|n_2}$), which is a dirichlet distribution with concentration of 1.

### Model justification

We can expect that if a restaurant has higher prices, then the restaurant will be higher quality. This should be reflected in the ratings by the customers, and those restaurants with higher quality will have higher ratings. However, one could set much higher expectations for more expensive restaurants, effectively cancelling out the higher quality food and service that is expected from a higher priced restaurant. We will keep this in mind when we discuss our results.

We also expect that different cuisines will have different ratings. This dataset is exclusively about restaurants in North America. Therefore we may expect that reviewers are more likely to be from North America, so perhaps they would give a higher rating to a restaurant that serves western cuisine, such as Italian, or American.

# Results {#sec-res}

Our results are summarized in @tbl-modelresults, and @fig-modelresults.

The rows with numbers and a vertical line between them are the cutpoints. For example, a rating would be considered 1.5 if we had a $y^*$ that is greater than $1.0|1.5$ and less than $1.5|2.0$.

One thing to note is that `rstanarm` takes the first factor from increasing lexicographic order and sets it as a default. So you won't see American cuisine nor price range of 1 in @tbl-modelresults and @fig-modelresults. So every coefficient listed here is how different cuisines/price ranges perform *compared to* American cuisine and price range of 1.

With that in mind, let's explore how different cuisines perform compared to American cuisine. Most cuisines are likely to increase the rating of a restaurant. However, according to our model, if a restaurant serves Chinese cuisine, it will receive a slightly lower rating than American restaurants. Also, a restaurant serving Italian or Mexican cuisines will receive roughly the same rating, as that of an American restaurant. Rest of the cuisines perform better than American cuisine.

And as for price ranges, we can see compared to restaurants with price range of 1, those with price range 2 gets significantly higher rating. The increase of rating from going from price range of 1 to 2 is larger than that of 2 to 3, and that is larger still than that of 3 to 4. In other words, we have diminishing returns as the price range increases on the rating of the restaurant.

```{r}
#| echo: false
#| eval: true
#| label: tbl-modelresults
#| tbl-cap: "Table of how different cuisines and price range affects the rating of a restaurant"
#| warning: false

modelsummary(list("Coefficients and Cutpoints" = model))
```

```{r}
#| echo: false
#| eval: true
#| label: fig-modelresults
#| fig-cap: "Exploring The effects of cuisines and price ranges on the rating of a Restaurant"
#| warning: false

modelplot(model, conf_level = 0.9) +
  labs(x = "Coefficient Estimates and Their 90% Credible Intervals")
```

# Discussion {#sec-discussion}

## Rating Disparity Between Cuisines {#sec-first-point}

Certain cuisines had worse effect on restaurant rating than others. Namely, Chinese, American, Italian, and Mexican cuisines had noticeably worse rating than others. While it is plausible to state that restaurants with certain cuisines are simply worse, we will try to explain this backed with research.

As for Chinese cuisine, one possible cause is the stigma around Chinese food. Chinese restaurant syndrome was a list of symptoms supposedly linked by Chinese restaurants' excessive usage of monosodium glutamate (MSG) [@Mekkodathil_Sathian_2017]. Dr. Robert Ho Man Kwok first coined the term "Chinese Restaurant Syndrome" back in April of 1968, sending a letter to the New England Journal of Medicine [@LeMesurier_2017]. This stigma against Chinese restaurants could still be remaining today, leading to a lower rating.

American, Italian, and Mexican cuisine's bad performance could be explained by the demographic of the restaurants. All the restaurants in the dataset are in United States and Canada. All 3 aforementioned cuisines have very close ties with these countries. American cuisine is from United States. Italian cuisine is from Italy, but a lot of Italians are living in North America. Around 16 million Italian descendants are living in United States [@USCensus], and 1.5 million in Canada [@canadaCensus]. Mexico shares a border with United states, therefore a ton of cultural influences were made in southern United States by Mexicans. What we propose is that people rate restaurants that serve foods from their own culture harshly. For example, people who have Mexican parents or has been raised with Mexican culture will have higher standards for Mexican food.

We can try attributing this to the fact that different cuisines will have different price ranges. Therefore one can argue that those cuisines with higher proportion of low price restaurants will be more likely to have lower ratings. @Fig-cuisine-price-rel shows each cuisine's price range proportions. It shows that while Chinese and Mexican restaurants have high proportion of restaurants with price range of 1, but it is not the case for American and Italian cuisine. 

```{r}
#| label: fig-cuisine-price-rel
#| fig-cap: "Relationship between Cuisine and Price Range (Normalized)"
#| echo: false
#| warning: false
#| message: false

data_counts <- data |>
  group_by(cuisine, price) |>
  summarize(count = n()) |>
  ungroup()

# Calculate the total count of each cuisine category
cuisine_total_counts <- data_counts |>
  group_by(cuisine) |>
  summarize(total_count = sum(count))

# Merge the counts with the total counts
data_normalized <- data_counts |>
  left_join(cuisine_total_counts, by = "cuisine") |>
  mutate(normalized_count = count / total_count) |>
  arrange(count)

# Plot the relationship between cuisine and price range with normalized counts
data_normalized |>
  ggplot(aes(x = cuisine, y = normalized_count, fill = factor(price))) +
  geom_bar(stat = "identity") +
  labs(
    x = "Cuisine",
    y = "Percentage",
    fill = "Price Range"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

Another interesting insight is that these 4 cuisines we have listed as "worse" than others are the top 4 cuisines excluding "Other" category in our dataset (Check @tbl-category-summary). Perhaps more restaurants there are for certain cuisines, people's expectations are higher, leading to lower rating for "average" experiences in those restaurants. @Fig-cuisine-ratings shows the relationship between the number of restaurant and the rating that a cuisine has. We can clearly see there is a downward trend as number of restaurants increase. This could have occurred because people associate rare cuisine as being better. Also, there is a possibility that the owners that would care about their Yelp categories are also more likely to care about the service and the food of the restaurant.

```{r}
#| label: fig-cuisine-ratings
#| fig-cap: "Average Rating vs. Number of Restaurants by Cuisine"
#| echo: false
#| warning: false
#| message: false

# Get average rating per cuisine
cuisine_summary <- data %>%
  group_by(cuisine) %>%
  summarize(num_restaurants = n(), avg_rating = mean(rating))

# Plot number of restaurants vs average rating
ggplot(cuisine_summary, aes(x = num_restaurants, y = avg_rating)) +
  geom_point() +
  geom_text(aes(label = cuisine), nudge_y = 0.02, size = 3, angle = 25) +
  labs(x = "Number of Restaurants", y = "Average Rating") +
  theme_minimal()
```

## Price Range and Rating

We also observed that higher price range of a restaurant means the restaurant will higher ratings. We have expected this in the model section, but the diminishing returns of ratings as price increases was not expected. We can plot out the relationship between the price and the rating by cuisine to further illustrate this idea. @Fig-rating-price shows that the lower rating cuisines do have lower average prices. But there are cuisines, such as Caribbean or Vietnamese that has a high rating, yet with lower average prices. The figure shows that for some cuisines, their price range doesn't affect their ratings.

```{r}
#| echo: false
#| eval: true
#| label: fig-rating-price
#| fig-cap: "Average Rating vs. Average Price by Cuisine"
#| warning: false

cuisine_summary <- data %>%
  group_by(cuisine) %>%
  summarize(
    avg_price = mean(as.numeric(factor(price), ordered = TRUE)),
    avg_rating = mean(rating)
  )

# Plot
ggplot(cuisine_summary, aes(x = avg_price, y = avg_rating, label = cuisine)) +
  geom_point() +
  geom_text(aes(label = cuisine), nudge_x = 0.05, nudge_y = 0.05, size = 3, angle = 45, hjust = 1) + # Add text labels with a slight nudge and angle
  labs(x = "Average Price", y = "Average Rating", ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

This could have possibly been caused by simply those with lower prices cannot afford decent service and food, but that still does not explain the low average rating of Italian and American restaurants which have higher costs yet near the same rating as Mexican and Chinese restaurants. Another way this could have been caused is because, again, people rate rarer cuisines higher than common ones. So perhaps in later studies, more research can be done with those rarity in mind.

## Weaknesses and next steps

A weakness that we have observed is that there may not be enough variables in our model to correctly model the rating. We could have added more factors, such as how rare the cuisine is in the dataset, or the number of reviews. We might have enough information to perform post-stratification with the number of ratings for a restaurant, but that would require a reliable, bigger dataset on reviews of restaurants which we do not have access to. 

Another limitation could have been in how we clean our data. We selected businesses that had restaurant-related categories in Yelp, but there is likely to be many businesses which forgot to add the restaurant related categories on Yelp, or simply does not care. Therefore, filtering restaurants by categories is unreliable.

The data itself is also a limitation. The data only contains restaurants from big cities, such as Toronto, Vancouver, and Las Vegas. This could have caused a skew in our dataset, over-representing restaurants in bigger cities, and not those in the smaller, suburban communities. Not only that, the ratings of restaurants were given in 0.5 increments which meant it isn't the most accurate rating we could have gotten.

Next steps to take are refining this model to take account of different variables that were missed in this paper and improving the predictability of the model. Perhaps with a newer database, this study shall be repeated too. 

\newpage

\appendix

# Appendix {.unnumbered}

# Cleaned Dataset Interactive Map {#sec-dataset-map}

Be wary of lag, there are tens of thousands of datapoints being plotted, and it may lag on machines that are not fast. 

The raw dataset map is here: [https://alexsohn1126.github.io/yelp-analysis/other/map/rawmap.html](https://alexsohn1126.github.io/yelp-analysis/other/map/rawmap.html)

As you can see, there are no datapoints near Toronto, Montreal, or Calgary like the documentation has stated.

The cleaned dataset map here: [https://alexsohn1126.github.io/yelp-analysis/other/map/map.html](https://alexsohn1126.github.io/yelp-analysis/other/map/map.html)

The datapoints are colored by their price ranges. Clicking on each datapoint will show it's name, rating, cuisine, and price.

# Model details {#sec-model-details}

## Posterior predictive check

In @fig-ppcheckandposteriorvsprior-1 we implement a posterior predictive check. This shows that the there is a large disparity between the predictions and the actual data.

In @fig-ppcheckandposteriorvsprior-2 we compare the posterior with the prior. This shows the posteriors are around where the credible intervals are in priors.

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| label: fig-ppcheckandposteriorvsprior-1
#| fig-height: 7
#| fig-cap: "Examining how the model fits, and is affected by the data - Posterior prediction check"

pp_plot <- pp_check(model) +
  theme_classic() +
  theme(legend.position = "bottom")
pp_plot
```

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| label: fig-ppcheckandposteriorvsprior-2
#| fig-height: 7
#| fig-cap: "Examining how the model fits, and is affected by the data - Comparing the posterior with the prior"

pvpplot <- posterior_vs_prior(model) +
  theme_minimal() +
  theme(legend.position = "bottom") +
  coord_flip()

pvpplot
```

## Diagnostics

@fig-stanareyouokay-1 is a trace plot. It shows the chains cover a constant amount of region. This suggests that a large amount of sample is chosen at around the target space we want to explore.

@fig-stanareyouokay-2 is a Rhat plot. It shows all of the Rhat values are very close to 1, meaning the chains had enough time to converge.

```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| label: fig-stanareyouokay-1
#| fig-height: 7
#| fig-cap: "Checking the convergence of the MCMC algorithm - Trace Plot"

plot(model, "trace") +
  theme_minimal() +
  theme(legend.position = "bottom")
```

```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| label: fig-stanareyouokay-2
#| fig-height: 7
#| fig-cap: "Checking the convergence of the MCMC algorithm - Rhat Plot"

plot(model, "rhat") +
  theme_minimal() +
  theme(legend.position = "bottom")
```

\newpage

# References
